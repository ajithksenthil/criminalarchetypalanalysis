#!/usr/bin/env python3
"""
analyze_rich_conditional_results.py

Comprehensive analysis of the rich conditional matrix analysis results.
"""

import json
import numpy as np

def analyze_rich_conditional_results():
    """Analyze the rich conditional matrix analysis results."""
    
    print("="*80)
    print("RICH DATASET CONDITIONAL MATRIX ANALYSIS RESULTS")
    print("="*80)
    
    # Load analysis results
    with open('output_rich/analysis_results.json', 'r') as f:
        results = json.load(f)
    
    print(f"Dataset: {results['data_summary']['n_criminals']} criminals, {results['data_summary']['n_events']} events")
    print(f"Optimal k selected by conditional optimization: {results['optimization']['optimal_k']}")
    print(f"Clustering quality: {results['clustering']['silhouette']:.4f}")
    print()
    
    # Load conditional insights
    with open('output_rich/analysis/conditional_insights.json', 'r') as f:
        insights = json.load(f)
    
    print(f"ðŸŽ¯ CONDITIONAL INSIGHTS DISCOVERED: {len(insights)} demographic effects")
    print()
    
    # Analyze by demographic category
    categories = {}
    for key, data in insights.items():
        heading = data['heading']
        if heading not in categories:
            categories[heading] = []
        categories[heading].append((key, data))
    
    print("ðŸ“Š SIGNIFICANT EFFECTS BY DEMOGRAPHIC CATEGORY:")
    print("-" * 60)
    
    for heading, effects in categories.items():
        print(f"\n{heading}: {len(effects)} significant effects")
        
        for effect_key, effect_data in effects:
            value = effect_data['value']
            n_criminals = effect_data['n_criminals']
            l1_diff = effect_data['l1_difference']
            ks_pvalue = effect_data['statistics']['ks_pvalue']
            
            print(f"  â€¢ {value}: {n_criminals} criminals, L1={l1_diff:.3f}, p={ks_pvalue:.2e}")
            
            # Find dominant cluster for this demographic
            stationary_cond = effect_data['stationary_cond']
            dominant_cluster = np.argmax(stationary_cond)
            dominant_prob = stationary_cond[dominant_cluster]
            
            if dominant_prob > 0.5:  # Strong dominance
                print(f"    â†’ Strongly dominated by Cluster {dominant_cluster} ({dominant_prob:.1%})")
    
    print("\n" + "="*80)
    print("TOP 10 STRONGEST CONDITIONAL EFFECTS")
    print("="*80)
    
    # Sort by effect strength (L1 difference)
    all_effects = []
    for key, data in insights.items():
        all_effects.append((key, data['l1_difference'], data['statistics']['ks_pvalue'], data['n_criminals']))
    
    all_effects.sort(key=lambda x: x[1], reverse=True)
    
    for i, (effect_key, l1_diff, p_value, n_criminals) in enumerate(all_effects[:10]):
        print(f"{i+1:2d}. {effect_key}")
        print(f"     L1 difference: {l1_diff:.3f}")
        print(f"     p-value: {p_value:.2e}")
        print(f"     Sample size: {n_criminals} criminals")
        print()
    
    print("="*80)
    print("INTERPRETATION")
    print("="*80)
    
    # Analyze sex differences
    sex_effects = [(k, v) for k, v in insights.items() if 'Sex=' in k]
    if sex_effects:
        print("\nðŸš¹ðŸšº SEX DIFFERENCES IN CRIMINAL BEHAVIOR:")
        for effect_key, data in sex_effects:
            sex = data['value']
            n_criminals = data['n_criminals']
            stationary = data['stationary_cond']
            dominant_cluster = np.argmax(stationary)
            dominant_prob = stationary[dominant_cluster]
            
            print(f"  {sex} criminals ({n_criminals} individuals):")
            print(f"    â†’ Primary archetype: Cluster {dominant_cluster} ({dominant_prob:.1%})")
            
            # Compare to global distribution
            global_stationary = data['global_stationary']
            global_dominant = np.argmax(global_stationary)
            if dominant_cluster != global_dominant:
                print(f"    â†’ DIFFERENT from global pattern (Cluster {global_dominant})")
            else:
                print(f"    â†’ Similar to global pattern")
    
    # Analyze other strong demographic effects
    strong_effects = [e for e in all_effects if e[1] > 1.0 and e[3] >= 5]  # Strong effect, sufficient sample
    
    print(f"\nðŸŽ¯ STRONG DEMOGRAPHIC EFFECTS ({len(strong_effects)} found):")
    print("These demographic factors significantly alter criminal archetypal patterns:")
    
    for effect_key, l1_diff, p_value, n_criminals in strong_effects[:5]:
        data = insights[effect_key]
        heading = data['heading']
        value = data['value']
        
        stationary = data['stationary_cond']
        dominant_cluster = np.argmax(stationary)
        dominant_prob = stationary[dominant_cluster]
        
        print(f"\n  â€¢ {heading} = {value}")
        print(f"    Sample: {n_criminals} criminals")
        print(f"    Effect strength: {l1_diff:.3f}")
        print(f"    Primary archetype: Cluster {dominant_cluster} ({dominant_prob:.1%})")
        print(f"    Statistical significance: p = {p_value:.2e}")
    
    print(f"\nâœ… CONDITIONAL EFFECT OPTIMIZATION SUCCESS:")
    print(f"Your system successfully identified {len(insights)} significant demographic effects")
    print(f"on criminal archetypal transition patterns across {results['data_summary']['n_criminals']} criminals!")
    
    print(f"\nðŸ”¬ SCIENTIFIC IMPACT:")
    print("This analysis provides empirical evidence that:")
    print("â€¢ Criminal behavior patterns vary significantly by demographic factors")
    print("â€¢ Different groups follow different archetypal life trajectories") 
    print("â€¢ Conditional Markov analysis can detect these subtle but important differences")
    print("â€¢ Your optimization successfully identified the optimal clustering for maximum effect detection")

if __name__ == "__main__":
    analyze_rich_conditional_results()
